先说 react  再说 vue  在进行两者比较，php是世界上最好的语言

能力越大，责任越大。 Ben Parker

JSX只是JavaScript混合着XML语法，然而一旦你掌握了它，它使用起来会让你感到畅快。

对于管理大型应用中的状态这一话题而言，Vue.js的作者尤雨溪曾说过，（Vue的）解决方案适用于小型应用，但对于对于大型应用而言不太适合。


后期优化：
1、webpack版本升级
2、从 JavaScript 到 TypeScrript。
3、加入单元测试
4、代码风格统一，抒写验证规范 esLint

说完这些基础架构

为什么要使用 iconfont?
文字图片和文字之间的行高需要讲明

需要考虑的问题？
如何直接连接到线上库进行调试？前端的一个错误日志处理，考虑使用阿里的框架

前后端接口定义

代码工具选择 webstrom、vscode

前端安全防范

自动化?

性能优化？

自适应方案的选择

内存泄露的问题 


未来考虑设计自己的组件库

函数式编程

ajax 选择方案


css 预处理器


React 庞大的生态系统

react 又分了 react-dom

React是一个构建可组合用户界面的库。它鼓励创建可重用的UI组件，显示随时间变化的数据

模块化

为你程序编写独立的模块化UI组件，这样当某个或某些组件出现问题是，可以方便地进行隔离。
每个组件都可以进行独立的开发和测试，并且它们可以引入其它组件。这等同于提高了代码的可维护性。

为什么要使用现在这套，摒弃老的那些



伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 webapp 
模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的
技术来开发丰富的功能，每一个视图通过异步的方式加载，这导致页面初始化和
使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织
带来了巨大的挑战。

如何在开发环境组织好这些碎片化的代码和资源，并且保证
他们在浏览器端快速、优雅的加载和更新。


通过改变浏览器的像素密度，实现移动端完美自适应


像素密度(Dpi): 指每英寸中的像素数。如160dpi指手机水平或垂直方向上每英寸距离有160个像素点。假定设备分辨率为320*240，屏幕长2英寸宽1.5英寸，dpi=320/2=240/1.5=160

设备像素比（devicePixelRatio）：设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。

采用动态设置浏览器内部像素密度(Dpi)的原理对页面进行缩放，从而实现自适应。
 

 在这些属性里面，我们重点关注target-densitydpi，这个属性可以改变设备的默认缩放。medium-dpi是target-densitydpi的默认值，
 如果我们显式定义target-densitydpi=device-dpi，那么设备就会按照真实的dpi来渲染页面。打个比方说，一张320*480的图片，
 放在iphone4里面，默认是占满屏幕的，但如果定义了target-densitydpi=device-dpi，那么图片只占屏幕的四分之一（二分之一的平方），因为iphone4的分辨率是640*960。

在这种方案中，我们采用 target-densitydpi=device-dpi，这样一来，手机设备就会按照真实的像素数目来渲染，用专业的话来说，就是1 CSS pixels = 1 device pixels。


1.	页面只需要按照设计稿所给出的正常像素进行常规的固定宽度制作（一般为640 px或者720px）；然后填写设计稿宽度给js。
2.	在页面刚加载时，利用js获取页面的宽度以及设备像素比（devicePixelRatio）。
3.	利用js，通过设计稿的宽度，设备原始像素密度（常量160），页面宽度，设备像素比即可计算出设计稿对应设备的缩放dpi；具体公式如下：
最终缩放像素密度= 设计稿宽度/设备宽度*设备像素比*原始像素密度
4.	利用js；通过mate标签的targetDensitydpi属性将最终缩放像素密度写入页面；然后开始正常加载页面。这个计算以及加载过程并不影响性能。


medium-dpi是target-densitydpi的默认值，如果我们显式定义
target-densitydpi=device-dpi，那么设备就会按照真实的dpi来渲
染页面。打个比方说，一张320*480的图片，放在iphone4里面，默
认是占满屏幕的，但如果定义了target-densitydpi=device-dpi，那
么图片只占屏幕的四分之一（二分之一的平方），因为iphone4的分
辨率是640*960。

这些密度对应着一个特定的缩放比例值，拿我们最熟悉的iphone4或4s来说，它们的PPI是326，属于超高密度的手机。
当我们书写一个宽度为320px的页面放到iphone中显示，你会发现，它竟然是满宽的。这是因为，页面被默认放大了两倍，也就是640px，而iphone4或4s的宽，正是640px。
